import requests
from api.api_keys import malwarebazaar_api_key

#Fetches the Hash report from MalwareBazaar
def get_malwarebazaar_hash_report(hash_id):
        print(f"\nFetching hash report in MalwareBazaar for {hash_id}.")
        headers = {
            'API-KEY': malwarebazaar_api_key
        }
        data = {
            'query': 'get_info',
            'hash': hash_id,
            'key': 'links'
        }
        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers)
        if response.json()["query_status"] == 'hash_not_found':
            failure_message_for_hash_mb = f"   MalwareBazaar has no information on {hash_id}\n"
            print(failure_message_for_hash_mb)
            return failure_message_for_hash_mb

        else:
            mb_report = response.json()["data"][0]
            sha256_hash = mb_report.get("sha256_hash")
            sha1_hash = mb_report.get("sha1_hash")
            md5_hash = mb_report.get("md5_hash")
            delivery_method = mb_report.get("delivery_method")
            first_seen = mb_report.get("first_seen")
            last_seen = mb_report.get("last_seen")
            signature = mb_report.get("signature")
            tags = mb_report.get("tags")

            print(f"   SHA256 Hash: " +sha256_hash)
            print(f"   SHA1 Hash: " + sha1_hash)
            print(f"   MD5 Hash: " + md5_hash)
            print(f"   Delivery Method: " + delivery_method)
            print(f"   First Seen: " + str(first_seen))
            print(f"   Last Seen: " + str(last_seen))
            print(f"   Signature: " + signature)
            print(f"   Tags: ", tags)
            print("   MalwareBazaar URL https://bazaar.abuse.ch/sample/" + sha256_hash)
            results = f"   SHA256 Hash: {sha256_hash} \n   SHA1 Hash: {sha1_hash} \n   MD5 Hash: {md5_hash} \n   Delivery Method: {delivery_method} \n   First Seen: {first_seen} \n   Last Seen: {last_seen} \n   Signature: {signature} \n   Tags: {tags} \n   MalwareBazaar URL https://bazaar.abuse.ch/sample/{sha256_hash}\n"
            return results